#!/bin/bash

# Gestionnaire de tâches todo

TODO_FILE="$HOME/.todo_list"

# Fonction pour afficher l'aide
function show_help {
    echo "Usage: todo [command] [options]"
    echo "Commands:"
    echo "  help             Show this help message"
    echo "  create -n        Add a new task"
    echo "  create -r        Add a quick task"
    echo "  update -c <id>   Mark task as complete"
    echo "  update -i <id>   Mark task as incomplete"
    echo "  update -a <id>   Update all fields of a task"
    echo "  update -n <id> [options] Update specific fields of a task"
    echo "  delete <id>      Delete a task"
    echo "  show <id>        Show task details"
    echo "  -d <date>        List tasks for a given date"
    echo "  search -t <keyword> Search tasks by title"
    echo "  search -d <keyword> Search tasks by description"
    echo "  (no command)     List all tasks"
    echo "  -t               List today's tasks"
}

# Fonction pour ajouter une nouvelle tâche
function create_task {
    if [[ $1 == "-n" ]]; then
        echo "Enter title (required):"
        read title
        echo "Enter description:"
        read description
        echo "Enter location:"
        read location
        echo "Enter due date (DD-MM-YYYY, required):"
        read due_date
        echo "Enter due time (HH:MM, optional):"
        read due_time
    elif [[ $1 == "-r" ]]; then
        title=$2
        due_date=$3
        description=""
        location=""
        due_time=""
    fi

    if [[ -z "$title" || -z "$due_date" ]]; then
        echo "Title and due date are required."
        exit 1
    fi

    id=$(($(wc -l < "$TODO_FILE") + 1))
    echo "$id|$title|$description|$location|$due_date|$due_time|false" >> "$TODO_FILE"
    echo "Task added successfully."
}

# Fonction pour mettre à jour une tâche
function update_task {
    id=$2
    task=$(grep "^$id|" "$TODO_FILE")
    if [[ -z "$task" ]]; then
        echo "Task not found."
        exit 1
    fi

    case $1 in
        -c)
            sed -i "/^$id|/s/false$/true/" "$TODO_FILE"
            echo "Task marked as completed."
            ;;
        -i)
            sed -i "/^$id|/s/true$/false/" "$TODO_FILE"
            echo "Task marked as incomplete."
            ;;
        -a)
            IFS="|" read -r _ title description location due_date due_time completed <<< "$task"
            echo "Enter new title (leave empty to keep current):"
            read new_title
            echo "Enter new description (leave empty to keep current):"
            read new_description
            echo "Enter new location (leave empty to keep current):"
            read new_location
            echo "Enter new due date (DD-MM-YYYY, leave empty to keep current):"
            read new_due_date
            echo "Enter new due time (HH:MM, leave empty to keep current):"
            read new_due_time
            echo "Is the task completed? (true/false, leave empty to keep current):"
            read new_completed

            title=${new_title:-$title}
            description=${new_description:-$description}
            location=${new_location:-$location}
            due_date=${new_due_date:-$due_date}
            due_time=${new_due_time:-$due_time}
            completed=${new_completed:-$completed}

            sed -i "/^$id|/s/.*/$id|$title|$description|$location|$due_date|$due_time|$completed/" "$TODO_FILE"
            echo "Task updated successfully."
            ;;
        -n)
            IFS="|" read -r _ title description location due_date due_time completed <<< "$task"
            shift 2
            while [[ $# -gt 0 ]]; do
                case $1 in
                    -t) echo "Enter new title:"; read new_title; shift;;
                    -d) echo "Enter new description:"; read new_description; shift;;
                    -l) echo "Enter new location:"; read new_location; shift;;
                    -dd) echo "Enter new due date (DD-MM-YYYY):"; read new_due_date; shift;;
                    -dt) echo "Enter new due time (HH:MM):"; read new_due_time; shift;;
                    *) echo "Invalid option for updating task."; show_help; exit 1;;
                esac
            done

            title=${new_title:-$title}
            description=${new_description:-$description}
            location=${new_location:-$location}
            due_date=${new_due_date:-$due_date}
            due_time=${new_due_time:-$due_time}

            sed -i "/^$id|/s/.*/$id|$title|$description|$location|$due_date|$due_time|$completed/" "$TODO_FILE"
            echo "Task updated successfully."
            ;;
        *)
            echo "Invalid option for updating task. Use -c to mark as complete, -i to mark as incomplete, -a for full edit, or -n for normal edit with specific fields."
            show_help
            exit 1
            ;;
    esac
}

# Fonction pour supprimer une tâche
function delete_task {
    id=$1
    if grep -q "^$id|" "$TODO_FILE"; then
        sed -i "/^$id|/d" "$TODO_FILE"
        echo "Task deleted successfully."
    else
        echo "Task not found."
    fi
}

# Fonction pour afficher les détails d'une tâche
function show_task {
    id=$1
    task=$(grep "^$id|" "$TODO_FILE")
    if [[ -z "$task" ]]; then
        echo "Task not found."
        exit 1
    fi

    IFS="|" read -r _ title description location due_date due_time completed <<< "$task"
    echo "Task ID: $id"
    echo "Title: $title"
    echo "Description: $description"
    echo "Location: $location"
    echo "Due date and time: $due_date $due_time"
    echo "Completed: $completed"
}

# Fonction pour lister les tâches d'un jour donné
function list_tasks_by_date {
    date=$1
    completed=$(grep "|$date|.*|true" "$TODO_FILE")
    uncompleted=$(grep "|$date|.*|false" "$TODO_FILE")

    echo "Completed tasks on $date:"
    if [[ -z "$completed" ]]; then
        echo "No completed tasks found."
    else
        echo "$completed"
    fi

    echo "Uncompleted tasks on $date:"
    if [[ -z "$uncompleted" ]]; then
        echo "No uncompleted tasks found."
    else
        echo "$uncompleted"
    fi
}

# Fonction pour rechercher des tâches par titre
function search_by_title {
    keyword=$1
    results=$(grep "|[^|]*$keyword[^|]*|" "$TODO_FILE")

    echo "Search results for title containing '$keyword':"
    if [[ -z "$results" ]]; then
        echo "No tasks found."
    else
        echo "$results"
    fi
}

# Fonction pour rechercher des tâches par description
function search_by_description {
    keyword=$1
    results=$(grep "|[^|]*|[^|]*$keyword[^|]*|" "$TODO_FILE")

    echo "Search results for description containing '$keyword':"
    if [[ -z "$results" ]]; then
        echo "No tasks found."
    else
        echo "$results"
    fi
}

# Fonction pour lister toutes les tâches
function list_all_tasks {
    completed=$(grep "|true$" "$TODO_FILE")
    uncompleted=$(grep "|false$" "$TODO_FILE")

    echo "Completed tasks:"
    if [[ -z "$completed" ]]; then
        echo "No completed tasks found."
    else
        echo "$completed"
    fi

    echo "Uncompleted tasks:"
    if [[ -z "$uncompleted" ]]; then
        echo "No uncompleted tasks found."
    else
        echo "$uncompleted"
    fi
}

# Fonction pour lister les tâches du jour actuel
function list_today_tasks {
    today=$(date +%d-%m-%Y)
    list_tasks_by_date "$today"
}

# Fonction principale
function main {
    if [[ ! -f "$TODO_FILE" ]]; then
        touch "$TODO_FILE"
    fi

    case $1 in
        help) show_help;;
        create) create_task $2 $3 $4;;
        update) update_task $2 $3 $4 $5 $6 $7 $8 $9;;
        delete) delete_task $2;;
        show) show_task $2;;
        -d) list_tasks_by_date $2;;
        search) 
            case $2 in
                -t) search_by_title $3;;
                -d) search_by_description $3;;
            esac;;
        "") list_all_tasks;;
        -t) list_today_tasks;;
        *) echo "Unknown command: $1"; show_help;;
    esac
}

# Appel de la fonction principale avec tous les arguments
main "$@"
